services:
  mysql:
    image: mysql:8.0
    container_name: warranty_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 30s
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 5s
    networks:
      - warranty_network
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db_init:/docker-entrypoint-initdb.d

  backend:
    build: ./src/backend # Koristimo BUILD instrukciju
    container_name: warranty_backend
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      DB_DATABASE: ${DB_DATABASE}
      DB_HOST: mysql
      DB_PASSWORD: ${DB_PASSWORD}
      DB_USER: ${DB_USER}
      NODE_ENV: ${NODE_ENV}
      PORT: 3000
      SECRET_KEY: ${SECRET_KEY}
      REFRESH_SECRET_KEY: ${REFRESH_SECRET_KEY}
      MAILTRAP_HOST: ${MAILTRAP_HOST}
      MAILTRAP_PORT: ${MAILTRAP_PORT}
      MAILTRAP_USER: ${MAILTRAP_USER}
      MAILTRAP_PASS: ${MAILTRAP_PASS}
    networks:
      - warranty_network
    volumes:
      - ./src/backend/uploads:/app/uploads

  nginx:
    build: ./src/frontend/
    container_name: warranty_nginx
    restart: always
    depends_on:
      backend:
        condition: service_started
    ports:
      - "443:443"
    networks:
      - warranty_network
    volumes:
      - ./certs:/etc/nginx/certs
      - ./src/frontend/nginx/nginx.conf:/etc/nginx/conf.d/default.conf

volumes:
  mysql_data: {}

networks:
  warranty_network:
    driver: bridge